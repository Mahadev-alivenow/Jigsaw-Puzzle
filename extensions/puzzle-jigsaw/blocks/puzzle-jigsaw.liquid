{% comment %}Enhanced Jigsaw Puzzle Widget - CORS Fixed Version{% endcomment %}
{% assign puzzle_data = shop.metafields.puzzle_craft %}
{% assign subscription_active = puzzle_data.subscription_active %}
{% assign discount_codes = puzzle_data.discount_codes %}
{% assign active_campaign = app.metafields.puzzle_craft %}

{% if subscription_active == 'true' and active_campaign %}

<!-- Custom Dialog Modal -->
<div id="custom-dialog-overlay" style="
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(5px);
  z-index: 10003;
  justify-content: center;
  align-items: center;
  animation: fadeIn 0.3s ease;
">
  <div id="custom-dialog" style="
    background: white;
    border-radius: 16px;
    padding: 30px;
    max-width: 400px;
    width: 90%;
    text-align: center;
    box-shadow: 0 25px 80px rgba(0, 0, 0, 0.4);
    position: relative;
    animation: slideInScale 0.3s ease;
  ">
    <div id="dialog-icon" style="
      font-size: 48px;
      margin-bottom: 15px;
    ">ℹ️</div>

    <h3 id="dialog-title" style="
      margin: 0 0 15px 0;
      font-size: 20px;
      font-weight: 700;
      color: #333;
    ">Information</h3>

    <p id="dialog-message" style="
      margin: 0 0 25px 0;
      font-size: 16px;
      line-height: 1.5;
      color: #666;
    ">Message content</p>

    <div id="dialog-buttons" style="
      display: flex;
      gap: 10px;
      justify-content: center;
    ">
      <button id="dialog-ok-btn" onclick="closeCustomDialog()" style="
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 80px;
      ">OK</button>

      <button id="dialog-cancel-btn" onclick="closeCustomDialog(false)" style="
        background: #6c757d;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 80px;
        display: none;
      ">Cancel</button>
    </div>
  </div>
</div>

<!-- Floating Widget -->
<div id="puzzle-widget" style="
  position: fixed;
  {% case active_campaign.widgetPosition %}
    {% when 'right-top' %}
      top: 20px; right: 20px;
    {% when 'right-bottom' %}
      bottom: 20px; right: 20px;
    {% when 'bottom-center' %}
      bottom: 20px; left: 50%; transform: translateX(-50%);
    {% when 'left-bottom' %}
      bottom: 20px; left: 20px;
    {% else %}
      bottom: 20px; right: 20px;
  {% endcase %}
  width: 80px;
  height: 80px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 50%;
  box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
  cursor: pointer;
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  animation: pulseWidget 2s infinite;
" onclick="openPuzzleGame()">

  <!-- Widget Icon -->
  <div style="
    color: white;
    font-size: 28px;
    text-align: center;
    line-height: 1;
  ">
    🧩
  </div>

  <!-- Notification Badge -->
  <div style="
    position: absolute;
    top: -5px;
    right: -5px;
    background: #ff4757;
    color: white;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    font-size: 12px;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: bounce 1s infinite;
  ">
    !
  </div>
</div>

<!-- Game Popup Modal -->
<div id="puzzle-game-modal" style="
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(5px);
  z-index: 10000;
  justify-content: center;
  align-items: center;
  animation: fadeIn 0.3s ease;
">

  <!-- Game Container -->
  <div id="game-container" style="
    background: white;
    border-radius: 16px;
    width: 90%;
    max-width: 700px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    position: relative;
  ">

    <!-- Game Header -->
    <div style="
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px;
      border-radius: 16px 16px 0 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    ">
      <div>
        <h2 style="margin: 0; font-size: 24px; font-weight: 700;">🧩 Puzzle Challenge</h2>
        <p style="margin: 8px 0 0 0; font-size: 14px; opacity: 0.9;">Match pieces precisely to win!</p>
      </div>
      <div style="text-align: right;">
        <div id="timer-display" style="
          font-size: 36px; 
          font-weight: bold; 
          margin-bottom: 5px;
          text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        ">{{ active_campaign.timer }}</div>
        <div style="font-size: 12px; opacity: 0.8; text-transform: uppercase; letter-spacing: 1px;">seconds left</div>
      </div>

      <!-- Close Button -->
      <button onclick="closePuzzleGame()" style="
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(255,255,255,0.2);
        border: none;
        color: white;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background 0.2s ease;
      " onmouseover="this.style.background='rgba(255,255,255,0.3)'"
        onmouseout="this.style.background='rgba(255,255,255,0.2)'">
        ✕
      </button>
    </div>

    <!-- Game Content -->
    <div id="game-content" style="padding: 30px;">

      <!-- Real-time Score Display -->
      <div id="score-display" style="
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding: 15px;
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
      ">
        <div>
          <div style="font-size: 18px; font-weight: 700;">🏆 Score: <span id="current-score">0</span></div>
          <div style="font-size: 12px; opacity: 0.9;">+15 per correct piece</div>
        </div>
        <div style="text-align: right;">
          <div style="font-size: 16px; font-weight: 600;">🎯 <span id="completed-count">0</span>/{{ active_campaign.puzzlePieces }}</div>
          <div style="font-size: 12px; opacity: 0.9;">pieces placed</div>
        </div>
      </div>

      <!-- Progress Bar -->
      <div id="progress-section" style="margin-bottom: 25px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
          <span style="font-size: 14px; font-weight: 600; color: #495057;">Progress</span>
          <span id="progress-percentage" style="font-size: 14px; font-weight: 600; color: #28a745;">0%</span>
        </div>
        <div style="
          width: 100%;
          height: 10px;
          background: #e9ecef;
          border-radius: 5px;
          overflow: hidden;
          box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        ">
          <div id="progress-bar" style="
            width: 0%;
            height: 100%;
            background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
            transition: width 0.8s ease-out;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3);
          "></div>
        </div>
      </div>

      <!-- Reference Image -->
      <div style="text-align: center; margin-bottom: 25px;">
        <div style="font-size: 14px; font-weight: 600; color: #495057; margin-bottom: 10px;">📸 Reference (Click to
          toggle)</div>
        <div id="reference-image" onclick="toggleReference()" style="
          width: 80px;
          height: 80px;
          background-image: url('{{ active_campaign.imageUrl }}');
          background-size: cover;
          background-position: center;
          background-repeat: no-repeat;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.1);
          border: 3px solid #fff;
          opacity: 0.7;
          cursor: pointer;
          transition: all 0.3s ease;
          margin: 0 auto;
          display: inline-block;
        "></div>
      </div>

      <!-- Puzzle Board -->
      <div style="text-align: center; margin-bottom: 25px;">
        <div style="font-size: 14px; font-weight: 600; color: #495057; margin-bottom: 15px;">🎲 Puzzle Board</div>
        <div id="puzzle-board" style="
          width: 320px;
          height: 320px;
          margin: 0 auto;
          border: 3px solid #e9ecef;
          border-radius: 12px;
          background: #f8f9fa;
          display: grid;
          gap: 3px;
          padding: 10px;
          box-shadow: inset 0 2px 8px rgba(0,0,0,0.1);
        ">
        </div>
      </div>

      <!-- Puzzle Pieces -->
      <div style="text-align: center; margin-bottom: 25px;">
        <div style="font-size: 14px; font-weight: 600; color: #495057; margin-bottom: 15px;">🧩 Available Pieces</div>
        <div id="pieces-container" style="
          min-height: 120px;
          padding: 20px;
          background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
          border-radius: 12px;
          border: 2px dashed #ced4da;
          display: flex;
          flex-wrap: wrap;
          gap: 12px;
          justify-content: center;
          align-items: center;
        ">
          <div style="color: #6c757d; font-size: 14px;">Click "Start Game" to load puzzle pieces...</div>
        </div>
      </div>

      <!-- Game Controls -->
      <div style="text-align: center; display: flex; gap: 15px; justify-content: center; flex-wrap: wrap;">
        <button id="start-game-btn" onclick="startPuzzleGame()" style="
          background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
          color: white;
          border: none;
          padding: 15px 30px;
          border-radius: 30px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
          text-transform: uppercase;
          letter-spacing: 1px;
        " onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 6px 20px rgba(40, 167, 69, 0.4)'"
          onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 4px 15px rgba(40, 167, 69, 0.3)'">
          🚀 Start Game
        </button>

        <button id="submit-early-btn" onclick="submitEarly()" style="
          background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
          color: white;
          border: none;
          padding: 15px 30px;
          border-radius: 30px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);
          display: none;
        " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
          📤 Submit Early
        </button>
      </div>

    </div>
  </div>
</div>

<!-- Completion Modal -->
<div id="completion-modal" style="
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.9);
  backdrop-filter: blur(10px);
  z-index: 10001;
  justify-content: center;
  align-items: center;
  padding: 20px;
  box-sizing: border-box;
">
  <div style="
    background: white;
    border-radius: 16px;
    padding: 25px;
    max-width: 400px;
    width: 100%;
    max-height: 85vh;
    overflow-y: auto;
    text-align: center;
    box-shadow: 0 25px 80px rgba(0, 0, 0, 0.4);
    position: relative;
    box-sizing: border-box;
  ">

    <!-- Success Animation -->
    <div id="completion-icon"
      style="font-size: 60px; margin-bottom: 15px; animation: celebrationBounce 1s ease-in-out;">🎉</div>

    <h2 id="completion-title" style="color: #28a745; margin: 0 0 15px 0; font-size: 22px; font-weight: 700;">
      Puzzle Completed!
    </h2>

    <!-- Simplified Game Stats - Only Time and Score -->
    <div id="completion-stats" style="
      background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
      padding: 20px;
      border-radius: 10px;
      margin: 20px 0;
      border-left: 4px solid #28a745;
      font-size: 16px;
    ">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
        <div style="text-align: left;">
          <strong>⏱️ Time Taken:</strong><br>
          <span id="final-time" style="font-size: 18px; color: #28a745;">0s</span>
        </div>
        <div style="text-align: right;">
          <strong>🏆 Final Score:</strong><br>
          <span id="final-score" style="font-size: 18px; color: #28a745;">0</span>
        </div>
      </div>
    </div>

    <!-- Email Collection -->
    <div style="margin: 20px 0;">
      <label style="display: block; font-weight: 600; color: #495057; margin-bottom: 8px; font-size: 14px;">
        📧 Enter your email to claim reward:
      </label>
      <input type="email" id="user-email" placeholder="your@email.com" style="
        width: 100%;
        padding: 12px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 14px;
        margin-bottom: 15px;
        box-sizing: border-box;
        transition: border-color 0.3s ease;
      " onfocus="this.style.borderColor='#667eea'" onblur="this.style.borderColor='#e9ecef'">
    </div>

    <!-- Compact Discount Code Display -->
    <div id="discount-display" style="
      background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
      color: white;
      padding: 15px;
      border-radius: 12px;
      margin: 15px 0;
      box-shadow: 0 8px 25px rgba(40, 167, 69, 0.3);
      font-size: 14px;
    "></div>

    <!-- Compact Action Buttons -->
    <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
      <button id="claim-reward-btn" onclick="claimReward()" style="
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        flex: 1;
        min-width: 120px;
      " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
        🎁 Claim Reward
      </button>

      <button onclick="playAgain()" style="
        background: #6c757d;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        flex: 1;
        min-width: 120px;
      " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
        🔄 Play Again
      </button>
    </div>

  </div>
</div>

<!-- Loading Overlay -->
<div id="loading-overlay" style="
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  z-index: 10002;
  justify-content: center;
  align-items: center;
">
  <div style="
    background: white;
    padding: 30px;
    border-radius: 12px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  ">
    <div style="
      width: 40px;
      height: 40px;
      border: 4px solid #e9ecef;
      border-top: 4px solid #28a745;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 15px auto;
    "></div>
    <div style="font-size: 16px; font-weight: 600; color: #495057;">Saving to puzzle_craft database...</div>
  </div>
</div>

<style>
  /* Override theme CSS that hides empty elements */
/* Override theme CSS that hides empty elements */
#progress-section,
#progress-percentage,
#progress-bar,
#pieces-container,
.puzzle-piece,
.puzzle-slot,
#puzzle-board {
  display: block !important;
}

/* Ensure puzzle pieces are always visible */
.puzzle-piece {
  display: inline-block !important;
  visibility: visible !important;
}

.puzzle-slot {
  display: flex !important;
  visibility: visible !important;
}

#pieces-container {
  display: flex !important;
  visibility: visible !important;
}

#puzzle-board {
  display: grid !important;
  visibility: visible !important;
  
}
  /* Animations */
  @keyframes pulseWidget {
    0% {
      transform: scale(1);
      box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
    }

    50% {
      transform: scale(1.05);
      box-shadow: 0 6px 30px rgba(102, 126, 234, 0.6);
    }

    100% {
      transform: scale(1);
      box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
    }
  }

  @keyframes bounce {

    0%,
    20%,
    50%,
    80%,
    100% {
      transform: translateY(0);
    }

    40% {
      transform: translateY(-10px);
    }

    60% {
      transform: translateY(-5px);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  @keyframes slideInScale {
    from {
      opacity: 0;
      transform: scale(0.8) translateY(-20px);
    }

    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  @keyframes celebrationBounce {

    0%,
    20%,
    50%,
    80%,
    100% {
      transform: translateY(0) scale(1);
    }

    40% {
      transform: translateY(-15px) scale(1.1);
    }

    60% {
      transform: translateY(-8px) scale(1.05);
    }
  }

  @keyframes timerPulse {
    0% {
      transform: scale(1);
    }

    50% {
      transform: scale(1.1);
    }

    100% {
      transform: scale(1);
    }
  }

  @keyframes shake {

    0%,
    100% {
      transform: translateX(0);
    }

    25% {
      transform: translateX(-5px);
    }

    75% {
      transform: translateX(5px);
    }
  }

  @keyframes correctPlacement {
    0% {
      transform: scale(1);
    }

    50% {
      transform: scale(1.1);
    }

    100% {
      transform: scale(1);
    }
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }

    100% {
      transform: rotate(360deg);
    }
  }

  @keyframes gradientShift {
    0% {
      background-position: 0% 50%;
    }

    50% {
      background-position: 100% 50%;
    }

    100% {
      background-position: 0% 50%;
    }
  }

  @keyframes progressPulse {
    0% {
      box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3);
    }

    50% {
      box-shadow: 0 4px 8px rgba(40, 167, 69, 0.5);
    }

    100% {
      box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3);
    }
  }

  @keyframes slotHighlight {
    0% {
      border-color: #667eea;
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
    }

    50% {
      border-color: #28a745;
      box-shadow: 0 0 0 4px rgba(40, 167, 69, 0.3);
    }

    100% {
      border-color: #667eea;
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
    }
  }

  /* Fallback patterns for missing images */
  .puzzle-piece-fallback {
    background: linear-gradient(45deg, #667eea, #764ba2, #28a745, #ffc107) !important;
    background-size: 400% 400% !important;
    animation: gradientShift 3s ease infinite !important;
  }

  /* Enhanced drag feedback */
  .drag-over-highlight {
    animation: slotHighlight 1s ease-in-out infinite !important;
    transform: scale(1.05) !important;
  }

  .piece-being-dragged {
    opacity: 0.7 !important;
    transform: rotate(5deg) scale(1.1) !important;
    z-index: 1000 !important;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    #game-container {
      width: 95% !important;
      margin: 10px !important;
      max-height: 95vh !important;
    }

    #puzzle-board {
      width: 280px !important;
      height: 280px !important;
    }

    #puzzle-widget {
      width: 70px !important;
      height: 70px !important;
    }

    #puzzle-widget div:first-child {
      font-size: 24px !important;
    }

    #completion-modal {
      padding: 10px !important;
    }

    #completion-modal>div {
      padding: 20px !important;
      max-width: 350px !important;
      max-height: 90vh !important;
    }

    #completion-icon {
      font-size: 50px !important;
      margin-bottom: 10px !important;
    }

    #completion-title {
      font-size: 20px !important;
    }

    #custom-dialog {
      width: 95% !important;
      max-width: 350px !important;
      padding: 25px !important;
    }
  }

  @media (max-width: 480px) {
    #game-content {
      padding: 20px !important;
    }

    #completion-modal>div {
      padding: 15px !important;
      max-width: 320px !important;
    }

    #completion-stats {
      padding: 12px !important;
      font-size: 13px !important;
    }

    #discount-display {
      padding: 12px !important;
      font-size: 13px !important;
    }

    #custom-dialog {
      padding: 20px !important;
    }
  }
</style>

<div id="jigsaw-puzzle-widget"
  style="width: 100%; max-width: 800px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;">
  {% comment %} <div id="puzzle-container"
    style="position: relative; background: #f0f0f0; border-radius: 10px; padding: 20px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);">

    <!-- Game Header -->
    {% comment %} <div id="game-header" style="text-align: center; margin-bottom: 20px;">
      <h2 style="color: #333; margin: 0 0 10px 0;">🧩 Jigsaw Puzzle Challenge</h2>
      <p style="color: #666; margin: 0;">Complete the puzzle to unlock your discount!</p>
    </div>

    <!-- Email Input Section -->
    <div id="email-section"
      style="text-align: center; margin-bottom: 20px; padding: 15px; background: white; border-radius: 8px; border: 2px solid #e0e0e0;">
      <label for="player-email" style="display: block; margin-bottom: 8px; font-weight: bold; color: #333;">Enter your
        email to start:</label>
      <input type="email" id="player-email" placeholder="your@email.com" required
        style="padding: 10px; border: 1px solid #ddd; border-radius: 4px; width: 250px; max-width: 100%; margin-right: 10px;">
      <button id="start-game-btn" onclick="startGame()"
        style="padding: 10px 20px; background: #007cba; color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: bold;">
        Start Puzzle
      </button>
    </div> {% endcomment %}

    <!-- Game Stats -->
    <div id="game-stats"
      style="display: none; text-align: center; margin-bottom: 15px; padding: 10px; background: white; border-radius: 8px;">
      <div style="display: inline-block; margin: 0 15px;">
        <strong>Time:</strong> <span id="timer">00:00</span>
      </div>
      <div style="display: inline-block; margin: 0 15px;">
        <strong>Pieces:</strong> <span id="pieces-placed">0</span>/<span id="total-pieces">16</span>
      </div>
      <div style="display: inline-block; margin: 0 15px;">
        <strong>Progress:</strong> <span id="progress-percentage">0%</span>
      </div>
    </div>

    <!-- Puzzle Canvas -->
    <div id="puzzle-canvas-container" style="display: none; text-align: center; margin-bottom: 20px;">
      <canvas id="puzzle-canvas" width="600" height="400"
        style="border: 2px solid #333; border-radius: 8px; background: white; max-width: 100%; height: auto; cursor: pointer;">
      </canvas>
    </div>

    <!-- Game Controls -->
    <div id="game-controls" style="display: none; text-align: center; margin-bottom: 20px;">
      <button onclick="shufflePieces()"
        style="padding: 8px 16px; margin: 0 5px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer;">
        🔀 Shuffle
      </button>
      <button onclick="showHint()"
        style="padding: 8px 16px; margin: 0 5px; background: #ffc107; color: #333; border: none; border-radius: 4px; cursor: pointer;">
        💡 Hint
      </button>
      <button onclick="resetGame()"
        style="padding: 8px 16px; margin: 0 5px; background: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer;">
        🔄 Reset
      </button>
    </div>

    <!-- Completion Message -->
    <div id="completion-message"
      style="display: none; text-align: center; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 10px; margin-bottom: 20px;">
      <h3 style="margin: 0 0 10px 0;">🎉 Congratulations!</h3>
      <p id="completion-text" style="margin: 0 0 15px 0;">You completed the puzzle!</p>
      <div id="reward-section">
        <p style="margin: 0 0 10px 0; font-size: 18px; font-weight: bold;">Your Reward:</p>
        <div id="discount-display" style="font-size: 24px; font-weight: bold; margin: 10px 0;">
          <span id="discount-code">PUZZLE10</span> - <span id="discount-amount">10% OFF</span>
        </div>
        <button id="claim-reward-btn" onclick="claimReward()"
          style="padding: 12px 24px; background: #28a745; color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 16px; font-weight: bold; margin-top: 10px;">
          🎁 Claim Your Discount
        </button>
      </div>
    </div>

    <!-- Loading Message -->
    <div id="loading-message"
      style="display: none; text-align: center; padding: 20px; background: #e3f2fd; border-radius: 8px; margin-bottom: 20px;">
      <p style="margin: 0; color: #1976d2;">⏳ Loading puzzle image...</p>
    </div>

    <!-- Debug Panel (Hidden by default) -->
    {% comment %} <div id="debug-panel"
      style="display: none; margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
      <h4 style="margin: 0 0 10px 0; color: #495057;">Debug Information</h4>
      <div id="debug-info" style="font-family: monospace; font-size: 12px; color: #6c757d; white-space: pre-wrap;">
      </div>
      <button onclick="toggleDebugPanel()"
        style="margin-top: 10px; padding: 5px 10px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
        Hide Debug
      </button>
    </div>

    <!-- Show Debug Button -->
    <div style="text-align: center; margin-top: 10px;">
      <button onclick="toggleDebugPanel()"
        style="padding: 5px 10px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
        Show Debug Info
      </button>
    </div> {% endcomment %}

  </div> {% endcomment %}
</div>

<script>
  // ===== CUSTOM DIALOG SYSTEM =====
  let dialogResolve = null;

  function showCustomDialog( message, title = 'Information', type = 'info', showCancel = false )
  {
    return new Promise( ( resolve ) =>
    {
      dialogResolve = resolve;

      const overlay = document.getElementById( 'custom-dialog-overlay' );
      const dialog = document.getElementById( 'custom-dialog' );
      const icon = document.getElementById( 'dialog-icon' );
      const titleEl = document.getElementById( 'dialog-title' );
      const messageEl = document.getElementById( 'dialog-message' );
      const okBtn = document.getElementById( 'dialog-ok-btn' );
      const cancelBtn = document.getElementById( 'dialog-cancel-btn' );

      // Set content
      titleEl.textContent = title;
      messageEl.textContent = message;

      // Set icon and colors based on type
      switch ( type )
      {
        case 'success':
          icon.textContent = '✅';
          titleEl.style.color = '#28a745';
          okBtn.style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
          break;
        case 'warning':
          icon.textContent = '⚠️';
          titleEl.style.color = '#ffc107';
          okBtn.style.background = 'linear-gradient(135deg, #ffc107 0%, #fd7e14 100%)';
          break;
        case 'error':
          icon.textContent = '❌';
          titleEl.style.color = '#dc3545';
          okBtn.style.background = 'linear-gradient(135deg, #dc3545 0%, #e83e8c 100%)';
          break;
        case 'question':
          icon.textContent = '❓';
          titleEl.style.color = '#17a2b8';
          okBtn.style.background = 'linear-gradient(135deg, #17a2b8 0%, #6f42c1 100%)';
          break;
        default:
          icon.textContent = 'ℹ️';
          titleEl.style.color = '#333';
          okBtn.style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
      }

      // Show/hide cancel button
      if ( showCancel )
      {
        cancelBtn.style.display = 'inline-block';
        okBtn.textContent = 'Yes';
        cancelBtn.textContent = 'No';
      } else
      {
        cancelBtn.style.display = 'none';
        okBtn.textContent = 'OK';
      }

      // Show dialog
      overlay.style.display = 'flex';

      // Focus OK button
      setTimeout( () => okBtn.focus(), 100 );
    } );
  }

  function closeCustomDialog( result = true )
  {
    const overlay = document.getElementById( 'custom-dialog-overlay' );
    overlay.style.display = 'none';

    if ( dialogResolve )
    {
      dialogResolve( result );
      dialogResolve = null;
    }
  }

  // Custom alert function
  async function customAlert( message, title = 'Information', type = 'info' )
  {
    await showCustomDialog( message, title, type, false );
  }

  // Custom confirm function
  async function customConfirm( message, title = 'Confirm', type = 'question' )
  {
    return await showCustomDialog( message, title, type, true );
  }

  // Game Configuration - Updated with proper API endpoint
  const PUZZLE_CONFIG = {
    imageUrl: '{{ active_campaign.imageUrl }}',
    pieces: parseInt( '{{ active_campaign.puzzlePieces }}' ) || 4,
    timer: parseInt( '{{ active_campaign.timer }}' ) || 60,
    position: `{{ active_campaign.widgetPosition | default: 'right-bottom' }}`,
    discountCodes: JSON.parse( ['{{ puzzle_data.discount_codes }}'] ) ,
    campaignName: `{{ active_campaign.name }}`,
    shopDomain: '{{ shop.domain }}' || 'jigsaw-craft.myshopify.com',
    // IMPORTANT: Replace this with your actual deployed API endpoint
    apiEndpoint: 'https://undergraduate-incl-inspection-relax.trycloudflare.com/api/puzzle/submit'
  };

  // Game State - Single declaration
  let gameState = {
    isPlaying: false,
    gameStarted: false,
    startTime: null,
    timeLeft: PUZZLE_CONFIG.timer,
    timerInterval: null,
    pieces: [],
    completedPieces: 0,
    score: 0,
    gameLoaded: false,
    isEarlySubmission: false,
    referenceVisible: false,
    imageLoaded: false
  };

  // Fallback images for different piece counts
  const FALLBACK_PATTERNS = [
    'linear-gradient(45deg, #667eea, #764ba2)',
    'linear-gradient(45deg, #28a745, #20c997)',
    'linear-gradient(45deg, #ffc107, #fd7e14)',
    'linear-gradient(45deg, #dc3545, #e83e8c)',
    'linear-gradient(45deg, #17a2b8, #6f42c1)',
    'linear-gradient(45deg, #6c757d, #495057)',
    'linear-gradient(45deg, #f8f9fa, #e9ecef)',
    'linear-gradient(45deg, #343a40, #212529)'
  ];

  // Get discount code based on score
  function getDiscountByScore( score )
  {
    // Sort codes by percentage descending to get the best discount first
    const sortedCodes = PUZZLE_CONFIG.discountCodes.sort( ( a, b ) => b.percentage - a.percentage );

    for ( const discount of sortedCodes )
    {
      if ( score >= ( discount.minScore || 0 ) )
      {
        return discount;
      }
    }

    // Return the lowest tier if no match
    return sortedCodes[ sortedCodes.length - 1 ];
  }

  // Comprehensive logging function
  function logGameEvent( eventType, data = {} )
  {
    const logData = {
      timestamp: new Date().toISOString(),
      eventType: eventType,
      gameState: {
        isPlaying: gameState.isPlaying,
        gameStarted: gameState.gameStarted,
        timeLeft: gameState.timeLeft,
        completedPieces: gameState.completedPieces,
        score: gameState.score,
        imageLoaded: gameState.imageLoaded
      },
      puzzleConfig: PUZZLE_CONFIG,
      sessionId: sessionStorage.getItem( 'puzzleSessionId' ) || 'unknown',
      userAgent: navigator.userAgent,
      url: window.location.href,
      ...data
    };

    console.log( `[PUZZLE LOG] ${ eventType }:`, logData );

    // Store in sessionStorage for potential sync with limited storage
    try
    {
      const existingLogs = JSON.parse( sessionStorage.getItem( 'puzzleLogs' ) || '[]' );

      // Keep only the last 50 logs to prevent quota exceeded error
      const maxLogs = 50;
      if ( existingLogs.length >= maxLogs )
      {
        existingLogs.splice( 0, existingLogs.length - maxLogs + 1 );
      }

      existingLogs.push( logData );
      sessionStorage.setItem( 'puzzleLogs', JSON.stringify( existingLogs ) );
    } catch ( storageError )
    {
      console.warn( 'Storage quota exceeded, clearing old logs:', storageError );
      // Clear old logs and try again
      try
      {
        sessionStorage.setItem( 'puzzleLogs', JSON.stringify( [ logData ] ) );
      } catch ( e )
      {
        console.error( 'Failed to save log even after clearing:', e );
      }
    }

    return logData;
  }

  // Initialize session ID
  if ( !sessionStorage.getItem( 'puzzleSessionId' ) )
  {
    sessionStorage.setItem( 'puzzleSessionId', 'session_' + Date.now() + '_' + Math.random().toString( 36 ).substr( 2, 9 ) );
  }

  // Show loading overlay
  function showLoading()
  {
    document.getElementById( 'loading-overlay' ).style.display = 'flex';
  }

  // Hide loading overlay
  function hideLoading()
  {
    document.getElementById( 'loading-overlay' ).style.display = 'none';
  }

  // Toggle reference image visibility
  function toggleReference()
  {
    const refImg = document.getElementById( 'reference-image' );
    gameState.referenceVisible = !gameState.referenceVisible;

    if ( gameState.referenceVisible )
    {
      refImg.style.opacity = '1';
      refImg.style.width = '120px';
      refImg.style.height = '120px';
    } else
    {
      refImg.style.opacity = '0.7';
      refImg.style.width = '80px';
      refImg.style.height = '80px';
    }

    logGameEvent( 'reference_toggled', { visible: gameState.referenceVisible } );
  }

  // Open puzzle game popup
  function openPuzzleGame()
  {
    document.getElementById( 'puzzle-game-modal' ).style.display = 'flex';
    document.body.style.overflow = 'hidden';

    if ( !gameState.gameLoaded )
    {
      initializePuzzle();
      gameState.gameLoaded = true;
    }

    logGameEvent( 'game_opened' );
  }

  // Close puzzle game
  function closePuzzleGame()
  {
    document.getElementById( 'puzzle-game-modal' ).style.display = 'none';
    document.getElementById( 'completion-modal' ).style.display = 'none';
    document.body.style.overflow = 'auto';

    if ( gameState.isPlaying )
    {
      pauseGame();
    }

    logGameEvent( 'game_closed' );
  }

  // Initialize puzzle - CORS-safe approach
  function initializePuzzle()
  {
    console.log( 'Initializing puzzle with config:', PUZZLE_CONFIG );
    logGameEvent( 'puzzle_initialization_started', { config: PUZZLE_CONFIG } );

    // Show loading message
    document.getElementById( 'pieces-container' ).innerHTML = `
    <div style="color: #6c757d; font-size: 14px; display: flex; align-items: center; gap: 10px;">
      <div style="width: 20px; height: 20px; border: 2px solid #6c757d; border-top: 2px solid transparent; border-radius: 50%; animation: spin 1s linear infinite;"></div>
      Creating puzzle pieces...
    </div>
  `;

    // Test if image loads
    const testDiv = document.createElement( 'div' );
    testDiv.style.cssText = `
    width: 1px; height: 1px;
    background-image: url('${ PUZZLE_CONFIG.imageUrl }');
    position: absolute; top: -9999px; left: -9999px;
  `;
    document.body.appendChild( testDiv );

    // Check if background image loaded
    setTimeout( () =>
    {
      const computedStyle = window.getComputedStyle( testDiv );
      const backgroundImage = computedStyle.backgroundImage;

      if ( backgroundImage && backgroundImage !== 'none' )
      {
        console.log( 'Image appears to be loading, proceeding with puzzle creation' );
        gameState.imageLoaded = true;
        logGameEvent( 'image_load_success', { imageUrl: PUZZLE_CONFIG.imageUrl } );
      } else
      {
        console.warn( 'Image may not be loading, using fallback patterns' );
        gameState.imageLoaded = false;
        logGameEvent( 'image_load_failed', { imageUrl: PUZZLE_CONFIG.imageUrl } );
      }

      document.body.removeChild( testDiv );
      createPuzzlePieces();
    }, 500 );
  }

  // Create puzzle pieces - Fixed layout logic
  function createPuzzlePieces()
  {
    console.log( 'Creating puzzle pieces...' );
    logGameEvent( 'pieces_creation_started' );

    const boardSize = 300;

    // Fixed layout logic: 4 pieces = 2x2, 8 pieces = 4x2
    let rows, cols;
    if ( PUZZLE_CONFIG.pieces === 4 )
    {
      rows = 2;
      cols = 2;
    } else if ( PUZZLE_CONFIG.pieces === 8 )
    {
      rows = 2;
      cols = 4;
    } else
    {
      // Fallback for other piece counts
      rows = Math.ceil( Math.sqrt( PUZZLE_CONFIG.pieces ) );
      cols = Math.ceil( PUZZLE_CONFIG.pieces / rows );
    }

    const pieceWidth = boardSize / cols;
    const pieceHeight = boardSize / rows;

    const piecesContainer = document.getElementById( 'pieces-container' );
    const puzzleBoard = document.getElementById( 'puzzle-board' );

    // Set grid layout for puzzle board
    puzzleBoard.style.gridTemplateColumns = `repeat(${ cols }, 1fr)`;
    puzzleBoard.style.gridTemplateRows = `repeat(${ rows }, 1fr)`;

    // Clear containers
    piecesContainer.innerHTML = '';
    puzzleBoard.innerHTML = '';

    console.log( `Creating ${ PUZZLE_CONFIG.pieces } pieces in ${ rows }x${ cols } grid` );
    logGameEvent( 'grid_layout_set', { rows, cols, pieces: PUZZLE_CONFIG.pieces } );

    // Create puzzle board slots
    for ( let i = 0; i < PUZZLE_CONFIG.pieces; i++ )
    {
      const slot = document.createElement( 'div' );
      slot.className = 'puzzle-slot';
      slot.dataset.position = i;
      slot.style.cssText = `
      border: 2px dashed #ced4da;
      border-radius: 8px;
      background: #f8f9fa;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 20px;
      color: #ced4da;
      transition: all 0.3s ease;
      position: relative;
      min-height: ${ pieceHeight - 20 }px;
    `;

      // Add position number
      const numberOverlay = document.createElement( 'div' );
      numberOverlay.style.cssText = `
      background: rgba(108, 117, 125, 0.8);
      color: white;
      padding: 6px 10px;
      border-radius: 15px;
      font-size: 14px;
      font-weight: bold;
      pointer-events: none;
    `;
      numberOverlay.textContent = i + 1;
      slot.appendChild( numberOverlay );

      // Add drop event listeners
      slot.addEventListener( 'dragover', handleDragOver );
      slot.addEventListener( 'drop', handleDrop );
      slot.addEventListener( 'dragleave', handleDragLeave );

      puzzleBoard.appendChild( slot );
    }

    // Create puzzle pieces with fallback handling
    for ( let i = 0; i < PUZZLE_CONFIG.pieces; i++ )
    {
      const row = Math.floor( i / cols );
      const col = i % cols;

      const piece = document.createElement( 'div' );
      piece.className = 'puzzle-piece';
      piece.dataset.position = i;
      piece.draggable = true;

      // Calculate background position
      const bgPosX = cols > 1 ? ( col * 100 ) / ( cols - 1 ) : 50;
      const bgPosY = rows > 1 ? ( row * 100 ) / ( rows - 1 ) : 50;

      // Try to use the original image, with fallback
      let backgroundStyle = '';
      if ( gameState.imageLoaded && PUZZLE_CONFIG.imageUrl )
      {
        backgroundStyle = `
        background-image: url('${ PUZZLE_CONFIG.imageUrl }');
        background-size: ${ cols * 100 }% ${ rows * 100 }%;
        background-position: ${ bgPosX }% ${ bgPosY }%;
        background-repeat: no-repeat;
      `;
      } else
      {
        // Use colorful fallback patterns
        backgroundStyle = `
        background: ${ FALLBACK_PATTERNS[ i % FALLBACK_PATTERNS.length ] };
        background-size: 200% 200%;
        animation: gradientShift 3s ease infinite;
        animation-delay: ${ i * 0.2 }s;
      `;
      }

      piece.style.cssText = `
      width: ${ pieceWidth - 20 }px;
      height: ${ pieceHeight - 20 }px;
      ${ backgroundStyle }
      border: 3px solid #fff;
      border-radius: 8px;
      cursor: grab;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      transition: all 0.3s ease;
      position: relative;
      flex-shrink: 0;
      user-select: none;
    `;

      // Add piece number for identification
      const pieceNumber = document.createElement( 'div' );
      pieceNumber.style.cssText = `
      position: absolute;
      top: 2px;
      right: 2px;
      background: rgba(0,0,0,0.8);
      color: white;
      font-size: 10px;
      padding: 2px 4px;
      border-radius: 3px;
      font-weight: bold;
      pointer-events: none;
      z-index: 1;
    `;
      piece.appendChild( pieceNumber );

      // Add drag event listeners
      piece.addEventListener( 'dragstart', handleDragStart );
      piece.addEventListener( 'dragend', handleDragEnd );

      // Add hover effects
      piece.addEventListener( 'mouseenter', function ()
      {
        if ( gameState.gameStarted )
        {
          this.style.transform = 'scale(1.05)';
          this.style.boxShadow = '0 6px 20px rgba(0,0,0,0.25)';
          this.style.zIndex = '10';
        }
      } );

      piece.addEventListener( 'mouseleave', function ()
      {
        if ( gameState.gameStarted )
        {
          this.style.transform = 'scale(1)';
          this.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
          this.style.zIndex = '1';
        }
      } );

      piecesContainer.appendChild( piece );
    }

    console.log( `Created ${ PUZZLE_CONFIG.pieces } puzzle pieces successfully` );
    logGameEvent( 'pieces_creation_completed', { totalPieces: PUZZLE_CONFIG.pieces } );

    // Update UI - Only show start button initially
    document.getElementById( 'start-game-btn' ).style.display = 'inline-block';
    document.getElementById( 'submit-early-btn' ).style.display = 'none';

    // Initialize progress display
    updateGameDisplay();
  }

  // Enhanced Drag and Drop Event Handlers
  function handleDragStart( e )
  {
    if ( !gameState.gameStarted )
    {
      e.preventDefault();
      return;
    }

    console.log( 'Drag start:', e.target.dataset.position );
    e.dataTransfer.setData( 'text/plain', e.target.dataset.position );

    // Enhanced drag feedback
    e.target.classList.add( 'piece-being-dragged' );
    e.target.style.cursor = 'grabbing';

    // Highlight the correct slot
    const correctSlot = document.querySelector( `.puzzle-slot[data-position="${ e.target.dataset.position }"]` );
    if ( correctSlot && !correctSlot.querySelector( '.puzzle-piece' ) )
    {
      correctSlot.classList.add( 'drag-over-highlight' );
    }

    logGameEvent( 'piece_drag_started', { piecePosition: e.target.dataset.position } );
  }

  function handleDragEnd( e )
  {
    console.log( 'Drag end' );

    // Remove drag feedback
    e.target.classList.remove( 'piece-being-dragged' );
    e.target.style.cursor = 'grab';

    // Remove all slot highlights
    document.querySelectorAll( '.puzzle-slot' ).forEach( slot =>
    {
      slot.classList.remove( 'drag-over-highlight' );
    } );

    logGameEvent( 'piece_drag_ended' );
  }

  function handleDragOver( e )
  {
    if ( !gameState.gameStarted ) return;
    e.preventDefault();

    const slot = e.currentTarget;
    if ( !slot.querySelector( '.puzzle-piece' ) )
    {
      slot.style.opacity = '0.9';
      slot.style.borderColor = '#28a745';
      slot.style.borderStyle = 'solid';
      slot.style.transform = 'scale(1.05)';
      slot.style.background = 'rgba(40, 167, 69, 0.1)';
    }
  }

  function handleDragLeave( e )
  {
    const slot = e.currentTarget;
    if ( !slot.querySelector( '.puzzle-piece' ) )
    {
      slot.style.opacity = '1';
      slot.style.borderColor = '#ced4da';
      slot.style.borderStyle = 'dashed';
      slot.style.transform = 'scale(1)';
      slot.style.background = '#f8f9fa';
    }
  }

  function handleDrop( e )
  {
    if ( !gameState.gameStarted ) return;
    e.preventDefault();

    const piecePosition = e.dataTransfer.getData( 'text/plain' );
    const slot = e.currentTarget;
    const slotPosition = slot.dataset.position;

    console.log( 'Drop attempt:', piecePosition, 'to slot:', slotPosition );
    logGameEvent( 'piece_drop_attempted', {
      piecePosition: parseInt( piecePosition ),
      slotPosition: parseInt( slotPosition ),
      isCorrect: piecePosition === slotPosition
    } );

    // Reset slot appearance
    handleDragLeave( e );

    // Check if slot is already occupied
    if ( slot.querySelector( '.puzzle-piece' ) )
    {
      console.log( 'Slot already occupied' );
      logGameEvent( 'drop_failed_slot_occupied', { slotPosition: parseInt( slotPosition ) } );
      return;
    }

    if ( piecePosition === slotPosition )
    {
      // Correct placement
      console.log( 'Correct placement!' );
      const piece = document.querySelector( `.puzzle-piece[data-position="${ piecePosition }"]` );

      if ( piece && piece.parentNode )
      {
        // Remove piece from current location
        piece.parentNode.removeChild( piece );

        // Clear slot and add piece
        slot.innerHTML = '';
        slot.appendChild( piece );

        // Update slot styling for correct placement
        slot.style.border = '3px solid #28a745';
        slot.style.background = 'rgba(40, 167, 69, 0.1)';
        slot.style.opacity = '1';
        slot.style.animation = 'correctPlacement 0.5s ease-in-out';

        // Update piece styling
        piece.draggable = false;
        piece.style.cursor = 'default';
        piece.style.border = 'none';
        piece.style.width = '100%';
        piece.style.height = '100%';
        piece.style.borderRadius = '6px';
        piece.classList.remove( 'piece-being-dragged' );

        // Remove the piece number
        const pieceNumber = piece.querySelector( 'div' );
        if ( pieceNumber ) pieceNumber.remove();

        // Update game state and score
        gameState.completedPieces++;
        gameState.score += 15;

        // Speed bonus
        if ( gameState.isPlaying )
        {
          const timeElapsed = PUZZLE_CONFIG.timer - gameState.timeLeft;
          if ( timeElapsed < 15 ) gameState.score += 10;
          else if ( timeElapsed < 30 ) gameState.score += 5;
        }

        // Update display with animation
        updateGameDisplay();

        logGameEvent( 'piece_placed_correctly', {
          piecePosition: parseInt( piecePosition ),
          completedPieces: gameState.completedPieces,
          score: gameState.score
        } );

        // Check if puzzle is complete
        if ( gameState.completedPieces === PUZZLE_CONFIG.pieces )
        {
          setTimeout( () => completePuzzle(), 500 );
        }
      }
    } else
    {
      // Wrong placement
      console.log( 'Wrong placement' );
      slot.style.opacity = '0.5';
      slot.style.borderColor = '#dc3545';
      slot.style.borderStyle = 'solid';
      slot.style.background = 'rgba(220, 53, 69, 0.1)';
      slot.style.animation = 'shake 0.5s ease-in-out';

      // Deduct points for wrong placement
      gameState.score = Math.max( 0, gameState.score - 2 );
      updateGameDisplay();

      logGameEvent( 'piece_placed_incorrectly', {
        piecePosition: parseInt( piecePosition ),
        slotPosition: parseInt( slotPosition ),
        score: gameState.score
      } );

      setTimeout( () =>
      {
        if ( !slot.querySelector( '.puzzle-piece' ) )
        {
          slot.style.opacity = '1';
          slot.style.borderColor = '#ced4da';
          slot.style.borderStyle = 'dashed';
          slot.style.background = '#f8f9fa';
          slot.style.animation = 'none';
        }
      }, 1000 );
    }
  }

  // Enhanced update game display - Fixed progress bar
  function updateGameDisplay()
  {
    // Update score and count
    document.getElementById( 'current-score' ).textContent = gameState.score;
    document.getElementById( 'completed-count' ).textContent = gameState.completedPieces;

    // Fixed progress calculation and animation
    const progressPercentage = Math.round( ( gameState.completedPieces / PUZZLE_CONFIG.pieces ) * 100 );
    const progressElement = document.getElementById( 'progress-percentage' );
    const progressBar = document.getElementById( 'progress-bar' );

    // Animate progress percentage
    progressElement.textContent = progressPercentage + '%';

    // Animate progress bar with enhanced styling
    progressBar.style.width = progressPercentage + '%';

    // Add pulse animation when progress increases
    if ( progressPercentage > 0 )
    {
      progressBar.style.animation = 'progressPulse 0.5s ease-in-out';
      setTimeout( () =>
      {
        progressBar.style.animation = 'none';
      }, 500 );
    }

    // Show progress section when game has started
    const progressSection = document.getElementById( 'progress-section' );
    progressSection.style.display = gameState.gameStarted ? 'block' : 'none';

    // Color coding for progress
    if ( progressPercentage >= 75 )
    {
      progressElement.style.color = '#28a745';
      progressBar.style.background = 'linear-gradient(90deg, #28a745 0%, #20c997 100%)';
    } else if ( progressPercentage >= 50 )
    {
      progressElement.style.color = '#ffc107';
      progressBar.style.background = 'linear-gradient(90deg, #ffc107 0%, #fd7e14 100%)';
    } else
    {
      progressElement.style.color = '#dc3545';
      progressBar.style.background = 'linear-gradient(90deg, #dc3545 0%, #e83e8c 100%)';
    }

    logGameEvent( 'display_updated', {
      score: gameState.score,
      completedPieces: gameState.completedPieces,
      progressPercentage: progressPercentage
    } );
  }

  // Enhanced start game with auto-shuffle
  function startPuzzleGame()
  {
    if ( gameState.isPlaying ) return;

    console.log( 'Starting puzzle game' );
    gameState.isPlaying = true;
    gameState.gameStarted = true;
    gameState.startTime = Date.now();
    gameState.timeLeft = PUZZLE_CONFIG.timer;
    gameState.completedPieces = 0;
    gameState.score = 0;
    gameState.isEarlySubmission = false;

    logGameEvent( 'game_started', {
      timer: PUZZLE_CONFIG.timer,
      pieces: PUZZLE_CONFIG.pieces
    } );

    // Auto-shuffle pieces once when game starts
    setTimeout( () =>
    {
      shufflePieces();
      logGameEvent( 'auto_shuffle_completed' );
    }, 200 );

    // Update UI - Show only submit early button (no shuffle button during play)
    document.getElementById( 'start-game-btn' ).style.display = 'none';
    document.getElementById( 'submit-early-btn' ).style.display = 'inline-block';

    // Start countdown timer
    gameState.timerInterval = setInterval( () =>
    {
      gameState.timeLeft--;
      updateTimerDisplay();

      if ( gameState.timeLeft <= 0 )
      {
        gameOver();
      }
    }, 1000 );

    updateGameDisplay();
  }

  // Submit early functionality
  function submitEarly()
  {
    if ( !gameState.isPlaying ) return;

    gameState.isEarlySubmission = true;
    clearInterval( gameState.timerInterval );
    gameState.isPlaying = false;

    const timeBonus = gameState.timeLeft * 1;
    gameState.score += timeBonus;

    logGameEvent( 'game_submitted_early', {
      timeLeft: gameState.timeLeft,
      completedPieces: gameState.completedPieces,
      score: gameState.score
    } );

    showCompletionResults();
  }

  // Show completion results with simplified display
  function showCompletionResults()
  {
    const completionPercentage = Math.round( ( gameState.completedPieces / PUZZLE_CONFIG.pieces ) * 100 );
    const timeTaken = PUZZLE_CONFIG.timer - gameState.timeLeft;
    let canClaimReward = completionPercentage >= 25;

    // Get discount based on score
    const discount = getDiscountByScore( gameState.score );

    document.getElementById( 'completion-icon' ).textContent = completionPercentage >= 75 ? '🎉' : '⏰';
    document.getElementById( 'completion-title' ).textContent =
      completionPercentage >= 75 ? 'Great Progress!' : 'Time\'s Up!';
    document.getElementById( 'completion-title' ).style.color =
      completionPercentage >= 75 ? '#28a745' : '#ffc107';

    // Update simplified stats - only time and score
    document.getElementById( 'final-time' ).textContent = timeTaken + 's';
    document.getElementById( 'final-score' ).textContent = gameState.score;

    if ( canClaimReward )
    {
      document.getElementById( 'discount-display' ).innerHTML = `
      <div style="font-size: 16px; font-weight: bold; margin-bottom: 5px;">
        🎁 ${ discount.title }
      </div>
      <div style="font-size: 24px; font-weight: bold; letter-spacing: 2px; background: rgba(255,255,255,0.2); padding: 8px; border-radius: 6px; margin: 8px 0;">
        ${ discount.code }
      </div>
      <div style="font-size: 12px; opacity: 0.9;">
        ${ discount.percentage }% OFF your purchase!
      </div>
    `;
      document.getElementById( 'discount-display' ).style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
    } else
    {
      document.getElementById( 'discount-display' ).innerHTML = `
      <div style="font-size: 16px; font-weight: bold; margin-bottom: 5px;">
        😔 No Discount Available
      </div>
      <div style="font-size: 12px; opacity: 0.9;">
        Complete at least 50% to earn a discount!
      </div>
    `;
      document.getElementById( 'discount-display' ).style.background = '#dc3545';
    }

    logGameEvent( 'completion_results_shown', {
      completionPercentage,
      timeTaken,
      canClaimReward,
      discountTier: discount.tier,
      discountCode: discount.code
    } );

    document.getElementById( 'completion-modal' ).style.display = 'flex';
  }

  // Shuffle puzzle pieces (only used for auto-shuffle)
  function shufflePieces()
  {
    const container = document.getElementById( 'pieces-container' );
    const pieces = Array.from( container.querySelectorAll( '.puzzle-piece[draggable="true"]' ) );

    for ( let i = pieces.length - 1; i > 0; i-- )
    {
      const j = Math.floor( Math.random() * ( i + 1 ) );
      container.appendChild( pieces[ j ] );
    }

    logGameEvent( 'pieces_shuffled', { remainingPieces: pieces.length } );
  }

  // Update timer display
  function updateTimerDisplay()
  {
    const timerDisplay = document.getElementById( 'timer-display' );
    timerDisplay.textContent = gameState.timeLeft;

    if ( gameState.timeLeft <= 10 )
    {
      timerDisplay.style.color = '#dc3545';
      timerDisplay.style.animation = 'timerPulse 1s infinite';
    } else if ( gameState.timeLeft <= 20 )
    {
      timerDisplay.style.color = '#ffc107';
      timerDisplay.style.animation = 'none';
    } else
    {
      timerDisplay.style.color = 'white';
      timerDisplay.style.animation = 'none';
    }
  }

  // Pause game
  function pauseGame()
  {
    if ( gameState.timerInterval )
    {
      clearInterval( gameState.timerInterval );
      gameState.timerInterval = null;
    }
    gameState.isPlaying = false;
    logGameEvent( 'game_paused' );
  }

  // Complete puzzle successfully
  function completePuzzle()
  {
    clearInterval( gameState.timerInterval );
    gameState.isPlaying = false;

    const completionTime = PUZZLE_CONFIG.timer - gameState.timeLeft;
    const timeBonus = Math.max( 0, gameState.timeLeft * 3 );
    const speedBonus = completionTime < 20 ? 75 : completionTime < 40 ? 50 : 25;
    const difficultyBonus = PUZZLE_CONFIG.pieces * 15;

    gameState.score = gameState.score + timeBonus + speedBonus + difficultyBonus;

    logGameEvent( 'puzzle_completed', {
      completionTime,
      finalScore: gameState.score,
      bonuses: { timeBonus, speedBonus, difficultyBonus }
    } );

    showCompletionResults();
  }

  // Game over
  function gameOver()
  {
    gameState.isEarlySubmission = true;
    logGameEvent( 'game_over_time_up' );
    submitEarly();
  }

  // Save game data to MongoDB with enhanced CORS support
  async function saveGameDataToMongoDB( gameData )
  {
    try
    {
      console.log( '🚀 Attempting to save game data to MongoDB:', gameData );

      // Show loading overlay
      showLoading();

      // Enhanced fetch with proper CORS headers
      const response = await fetch( PUZZLE_CONFIG.apiEndpoint, {
        method: 'POST',
        mode: 'cors',
        credentials: 'omit',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Origin': window.location.origin,
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify( gameData )
      } );

      console.log( '📡 API Response status:', response.status );
      console.log( '📡 API Response headers:', Object.fromEntries( response.headers.entries() ) );

      // Check if response is ok
      if ( !response.ok )
      {
        const errorText = await response.text();
        console.error( '❌ API Error Response:', errorText );
        throw new Error( `HTTP error! status: ${ response.status }, message: ${ errorText }` );
      }

      // Check if response has content
      const responseText = await response.text();
      console.log( '📄 Raw response text:', responseText );

      if ( !responseText )
      {
        throw new Error( 'Empty response from server' );
      }

      // Try to parse JSON
      let result;
      try
      {
        result = JSON.parse( responseText );
      } catch ( parseError )
      {
        console.error( '❌ JSON parse error:', parseError );
        throw new Error( `Invalid JSON response: ${ responseText }` );
      }

      console.log( '✅ Parsed API response:', result );

      if ( result.success )
      {
        console.log( '✅ Game data saved successfully to puzzle_craft database:', result );
        logGameEvent( 'data_saved_to_mongodb', {
          gameId: result.gameId,
          discountCode: result.discountCode,
          collection: result.collection
        } );
        return result;
      } else
      {
        console.error( '❌ API returned error:', result.error );
        logGameEvent( 'data_save_failed', { error: result.error } );
        throw new Error( result.error || 'Unknown API error' );
      }

    } catch ( error )
    {
      console.error( '❌ Error saving game data to MongoDB:', error );
      logGameEvent( 'data_save_error', {
        error: error.message,
        stack: error.stack
      } );

      // Fallback: save to localStorage
      try
      {
        const existingData = JSON.parse( localStorage.getItem( 'puzzleGameData' ) || '[]' );
        existingData.push( gameData );
        localStorage.setItem( 'puzzleGameData', JSON.stringify( existingData ) );
        console.log( '💾 Game data saved to localStorage as fallback' );
        logGameEvent( 'data_saved_to_localstorage', {
          method: 'localStorage_fallback',
          totalRecords: existingData.length
        } );
        return { success: true, method: 'localStorage_fallback' };
      } catch ( localError )
      {
        console.error( '❌ Failed to save to localStorage:', localError );
        return { success: false, error: localError.message };
      }
    } finally
    {
      // Always hide loading overlay
      hideLoading();
    }
  }

  // Claim reward - Save to MongoDB and redirect to checkout
  async function claimReward()
  {
    const email = document.getElementById( 'user-email' ).value.trim();

    if ( !email || !email.includes( '@' ) )
    {
      await customAlert( 'Please enter a valid email address to claim your reward!', 'Invalid Email', 'warning' );
      document.getElementById( 'user-email' ).focus();
      return;
    }

    const completionPercentage = Math.round( ( gameState.completedPieces / PUZZLE_CONFIG.pieces ) * 100 );

    if ( gameState.isEarlySubmission && completionPercentage < 50 )
    {
      await customAlert( 'Sorry, you need to complete at least 50% of the puzzle to claim a reward!', 'Insufficient Progress', 'warning' );
      return;
    }

    // Disable claim button to prevent double submission
    const claimBtn = document.getElementById( 'claim-reward-btn' );
    claimBtn.disabled = true;
    claimBtn.textContent = '💾 Saving...';
    claimBtn.style.opacity = '0.7';

    const discount = getDiscountByScore( gameState.score );
    const timeTaken = PUZZLE_CONFIG.timer - gameState.timeLeft;

    // Get only essential logs to avoid storage issues
    const allLogs = JSON.parse( sessionStorage.getItem( 'puzzleLogs' ) || '[]' );
    const essentialLogs = allLogs.filter( log =>
      [ 'game_started', 'puzzle_completed', 'piece_placed_correctly', 'game_submitted_early' ].includes( log.eventType )
    );

    const gameData = {
      shop: PUZZLE_CONFIG.shopDomain,
      campaignName: PUZZLE_CONFIG.campaignName,
      playerEmail: email,
      score: gameState.score,
      completionPercentage: completionPercentage,
      timeUsed: timeTaken,
      totalTime: PUZZLE_CONFIG.timer,
      puzzlePieces: PUZZLE_CONFIG.pieces,
      completed: completionPercentage === 100,
      discountCode: discount.code,
      discountTier: discount.tier,
      discountPercentage: discount.percentage,
      timestamp: new Date().toISOString(),
      isEarlySubmission: gameState.isEarlySubmission,
      imageLoaded: gameState.imageLoaded,
      sessionId: sessionStorage.getItem( 'puzzleSessionId' ),
      allLogs: essentialLogs
    };

    console.log( '📊 Final game data for MongoDB:', gameData );
    logGameEvent( 'reward_claim_initiated', gameData );

    // Save to MongoDB
    const saveResult = await saveGameDataToMongoDB( gameData );

    // Re-enable button
    claimBtn.disabled = false;
    claimBtn.textContent = '🎁 Claim Reward';
    claimBtn.style.opacity = '1';

    if ( saveResult && saveResult.success )
    {
      // Store final data for reference
      sessionStorage.setItem( 'finalGameData', JSON.stringify( gameData ) );

      // Show success message
      const saveMethod = saveResult.method === 'localStorage_fallback' ? 'local storage' : 'puzzle_craft database';
      await customAlert( `🎉 Congratulations! Your game data has been saved to ${ saveMethod }. Redirecting to checkout with ${ discount.percentage }% discount!`, 'Success!', 'success' );

      // Close modals
      closePuzzleGame();

      // Redirect to discount URL (Shopify automatic discount)
      window.location.href = `https://${ PUZZLE_CONFIG.shopDomain }/discount/${ discount.code }`;
    } else
    {
      // Show error message but still allow checkout with discount
      const confirmed = await customConfirm( `⚠️ There was an issue saving your game data, but you can still use your discount code: ${ discount.code }. Would you like to proceed to checkout?`, 'Save Error', 'warning' );

      if ( confirmed )
      {
        // Close modals
        closePuzzleGame();

        // Redirect to checkout with discount code anyway
        window.location.href = `https://${ PUZZLE_CONFIG.shopDomain }/discount/${ discount.code }`;
      }
    }
  }

  // Play again
  function playAgain()
  {
    document.getElementById( 'completion-modal' ).style.display = 'none';
    resetGame();
    logGameEvent( 'play_again_clicked' );
  }

  // Reset game
  async function resetGame()
  {
    const confirmed = await customConfirm( 'Are you sure you want to reset the puzzle?', 'Reset Game', 'question' );
    if ( !confirmed ) return;

    clearInterval( gameState.timerInterval );

    gameState = {
      isPlaying: false,
      gameStarted: false,
      startTime: null,
      timeLeft: PUZZLE_CONFIG.timer,
      timerInterval: null,
      pieces: [],
      completedPieces: 0,
      score: 0,
      gameLoaded: true,
      isEarlySubmission: false,
      referenceVisible: false,
      imageLoaded: gameState.imageLoaded // Preserve image load status
    };

    document.getElementById( 'timer-display' ).textContent = PUZZLE_CONFIG.timer;
    document.getElementById( 'timer-display' ).style.color = 'white';
    document.getElementById( 'timer-display' ).style.animation = 'none';
    document.getElementById( 'start-game-btn' ).style.display = 'inline-block';
    document.getElementById( 'submit-early-btn' ).style.display = 'none';
    document.getElementById( 'user-email' ).value = '';

    const refImg = document.getElementById( 'reference-image' );
    refImg.style.opacity = '0.7';
    refImg.style.width = '80px';
    refImg.style.height = '80px';

    updateGameDisplay();
    createPuzzlePieces();
    logGameEvent( 'game_reset' );
  }

  // Initialize widget on page load
  document.addEventListener( 'DOMContentLoaded', function ()
  {
    console.log( 'DOM loaded, initializing puzzle widget' );
    logGameEvent( 'widget_initialized' );

    setTimeout( () =>
    {
      const widget = document.getElementById( 'puzzle-widget' );
      if ( widget )
      {
        widget.style.animation = 'pulseWidget 2s infinite';
      }
    }, 2000 );
  } );

  // Handle escape key
  document.addEventListener( 'keydown', function ( e )
  {
    if ( e.key === 'Escape' )
    {
      if ( document.getElementById( 'custom-dialog-overlay' ).style.display === 'flex' )
      {
        closeCustomDialog( false );
      } else
      {
        closePuzzleGame();
      }
    }
  } );

  // Export logs function for debugging
  window.getPuzzleLogs = function ()
  {
    return {
      sessionLogs: JSON.parse( sessionStorage.getItem( 'puzzleLogs' ) || '[]' ),
      finalGameData: JSON.parse( sessionStorage.getItem( 'finalGameData' ) || '{}' ),
      sessionId: sessionStorage.getItem( 'puzzleSessionId' ),
      localStorageData: JSON.parse( localStorage.getItem( 'puzzleGameData' ) || '[]' )
    };
  };

  // Export function to manually save data (for debugging)
  window.saveGameDataManually = function ( email )
  {
    if ( !email )
    {
      console.error( 'Email is required for manual save' );
      return;
    }

    const gameData = {
      shop: PUZZLE_CONFIG.shopDomain,
      campaignName: PUZZLE_CONFIG.campaignName,
      playerEmail: email,
      score: gameState.score,
      completionPercentage: Math.round( ( gameState.completedPieces / PUZZLE_CONFIG.pieces ) * 100 ),
      timeUsed: PUZZLE_CONFIG.timer - gameState.timeLeft,
      totalTime: PUZZLE_CONFIG.timer,
      puzzlePieces: PUZZLE_CONFIG.pieces,
      completed: gameState.completedPieces === PUZZLE_CONFIG.pieces,
      discountCode: getDiscountByScore( gameState.score ).code,
      discountTier: getDiscountByScore( gameState.score ).tier,
      discountPercentage: getDiscountByScore( gameState.score ).percentage,
      timestamp: new Date().toISOString(),
      isEarlySubmission: gameState.isEarlySubmission,
      imageLoaded: gameState.imageLoaded,
      sessionId: sessionStorage.getItem( 'puzzleSessionId' ),
      allLogs: JSON.parse( sessionStorage.getItem( 'puzzleLogs' ) || '[]' )
    };

    return saveGameDataToMongoDB( gameData );
  };

  // Test API endpoint function for debugging
  window.testAPIEndpoint = async function ()
  {
    try
    {
      console.log( '🧪 Testing API endpoint:', PUZZLE_CONFIG.apiEndpoint );
      const response = await fetch( PUZZLE_CONFIG.apiEndpoint, {
        method: 'OPTIONS',
        mode: 'cors',
        headers: {
          'Origin': window.location.origin,
          'Access-Control-Request-Method': 'POST',
          'Access-Control-Request-Headers': 'Content-Type, Accept'
        }
      } );

      console.log( '🧪 OPTIONS response:', response.status, Object.fromEntries( response.headers.entries() ) );
      return response;
    } catch ( error )
    {
      console.error( '🧪 API test failed:', error );
      return error;
    }
  };
</script>

{% endif %}

{% schema %}
{
"name": "Jigsaw Puzzle Widget",
"target": "head",
"settings": [
{
"type": "select",
"id": "widget_position",
"label": "Widget Position",
"options": [
{"value": "right-bottom", "label": "Right Bottom"},
{"value": "right-top", "label": "Right Top"},
{"value": "bottom-center", "label": "Bottom Center"},
{"value": "left-bottom", "label": "Left Bottom"}
],
"default": "right-bottom"
}
]
}
{% endschema %}